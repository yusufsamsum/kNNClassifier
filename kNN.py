# -*- coding: utf-8 -*-
"""hw1_part3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1soMXYQcX6GZzTfRPQDIZdtvaeqPpEu8i
"""

import os
import csv
import math
import random
import operator
import time

import numpy as np
import pandas as pd
from numpy import genfromtxt

import matplotlib.pyplot as plt
import matplotlib.image as mpimg

def get_distances(train, test):
    
    distances = []
    for row in range(train.shape[0]):
        distance = np.linalg.norm(train[row] - test) ## euclidean distance
        distances.append((distance, row))
    return distances


def get_k_neighbours(distances, k):
    
    neighbours = []
    
    distances.sort(key = operator.itemgetter(0))
    for i in range(k):
        neighbours.append(distances[i])
    return neighbours

def kNN_classifier(neighbours, labels):
    
    numberOfInactives = 0
    numberOfActives = 0
    
    for index in range(len(neighbours)):
        active = labels[neighbours[index][1]]
        if  active == 0:
            numberOfInactives += 1
        else:
            numberOfActives += 1
            
    if numberOfInactives > numberOfActives:
        return 0
    else:
        return 1

def calc_accuracy(actual_values, predictions):
    correct = 0
    for pred, act in zip(predictions, actual_values):
        if pred == act:
            correct += 1


    return (correct/float(actual_values.size)*100)

def get_precision(actual_values, predictions):
    tp = 0
    fp = 0
    for pred, act in zip(predictions, actual_values):
        if pred == 1:
            if act == 1.0:
                tp += 1
            else:
                fp += 1
    if tp == 0 and fp == 0:
        return 0
    else:
        return ( (tp/(tp + fp)) * 100)

root = '/Users/yusufsamsum/Desktop/question3_datafiles'
drug_index_csv = os.path.join(root, 'question-3-drug-index.csv')
train_features_csv = os.path.join(root, 'question-3-train-features.csv')
train_labels_csv = os.path.join(root, "question-3-train-labels.csv")
train_protein_index_csv = os.path.join(root, "question-3-train-protein-index.csv")
valid_features_csv = os.path.join(root, "question-3-valid-features.csv")
valid_labels_csv = os.path.join(root, "question-3-valid-labels.csv")
valid_protein_index_csv = os.path.join(root, "question-3-valid-protein-index.csv")

## dataframes
train_protein_data = pd.read_csv(train_protein_index_csv, header = None)
drug_index_data = pd.read_csv(drug_index_csv, header = None)
valid_protein_data = pd.read_csv(valid_protein_index_csv, header = None)

train_features_data = np.genfromtxt(train_features_csv, delimiter = ',')
train_labels_data = np.genfromtxt(train_labels_csv, delimiter = ',')
valid_features_data = np.genfromtxt(valid_features_csv, delimiter = ',')
valid_labels_data = np.genfromtxt(valid_labels_csv, delimiter = ',')

distances = []
k_list = [1, 3, 5, 10, 20, 50, 100, 200]

s_time = time.time()
for i in range(valid_features_data.shape[0]):
    distances.append(get_distances(train_features_data, valid_features_data[i]))
f_time = time.time()
print( f_time - s_time )

def get_overall_with_k_list(distances, k):
    precisions = []
    accuracies = []
    for m in k:
        s_time = time.time()
        neighbours = []
        for i in range(valid_features_data.shape[0]):
            neighbours.append(get_k_neighbours(distances[i], m))
        results = []
        for i in range(len(neighbours)):
            results.append(kNN_classifier(neighbours[i], train_labels_data))
        f_time = time.time()
        print('Runtime for k:', m, " ", f_time -  s_time )
        accuracies.append((m, calc_accuracy(valid_labels_data, results)))
        precisions.append((m, get_precision(valid_labels_data, results)))
    return accuracies, precisions

acc, prec = get_overall_with_k_list(distances, k_list)
prec

accuracies = []
for i in acc:
    accuracies.append(i[1])

k_values = ['1', '3', '5', '10', '20', '50', '100', '200']
plt.bar(k_values, accuracies)
plt.title("K Values vs Accuracies")
plt.show()

precisions = []
for i in prec:
    precisions.append(i[1])

plt.bar(k_values, precisions)
plt.title("K Values vs Precisions")
plt.show()

plt.scatter(k_values, accuracies, label= "stars", color= "green",  
            marker= "*") 
plt.title("K Values vs Accuracies")
plt.show()

plt.plot(k_values, accuracies, color='green', linestyle='dashed', linewidth = 3, 
         marker='o', markerfacecolor='blue', markersize=12) 
plt.title("K Values vs Accuracies")
plt.show()

plt.plot(k_values, precisions, color='green', linestyle='dashed', linewidth = 3, 
         marker='o', markerfacecolor='blue', markersize=12) 
plt.title("K Values vs Precisions")
plt.show()

prec_df = pd.DataFrame(prec, columns=['K_Value', 'Precision'])
prec_df

acc_df = pd.DataFrame(acc, columns = ['K_Value', 'Accuracies'])
acc_df

